Per trattare elementi indipendenti in un unico modo possiamo usare
l'interfaccia, ovvero una classe astratta che contiene solamente metodi puri
(void funzione() = 0;)

Un esempio potrebbe essere calcolare l'area di figure diverse. Per semplificare
creiamo prima una classe astratta con void area()=0; Dopo andiamo ad
implementare le funzioni in ogni altra classe derivata.

4 tipi per fare cast: a=float(i) OPPURE a=(float) i OPPURE
a=static_cast<float>(i).

i=reinterpret_cast<int>(ptr) **CASTING INUTILE, TRASFORMA BIT PER BIT**
const_cast<int>(c_var) **Esempio: trasforma const in in int (RIMUOVE IL CONST)
p=dinamic_cast<Derived*>(ptr) **Casting fatto a tempo di esecuzione, molto utile
per il polimorfismo e per le gerarchie Serve per capire a quale tipo punta il
puntatore (durante l'esecuzione)

nomervariabile=dynamic_cast<quelloacuvoglioconvertire>(quellochevoglioconvertire).
Se restituisce NULL non riesce a completare la
conversione.

Quando una sottoclasse eredita proprietà da più di una superclasse si parla di
ereditarietà multipla.
