Insertion sort:

parto da 1 perché sicuramente il primo elemento è già ordinato:

void insertionsort(int a[], int n){
  int i,j,valore;
  for(i=1;i<n;i++){
    valore=a[i];
    j=i-1;
    while(j>=0 &&a[j]>valore){
      a[j+1]=a[j];
      j--;
    }
    a[j+1]=valore;
  }
}

Tutte le possibili sequenze che l'algoritmo potrebbe compiere sono n!
Ad ogni confronto l'algoritmo capisce qualcosa in più:
1 primo uguale a secondo
2 primo maggiore secondo
3 primo minore secondo
Quanti passi dovrà fare per catturare tutte queste n! sequenze?
Dopo 3 passi 3^3
Dopo t passi 3^t situazioni ---> 3^t>=n!==> 3^t>=n(n-1).....n/2>=n/2^(n/2) ==>
3^t>=n/2^(n/2) posso usare il logaritmo in base tre perché sicuramente prenderò in considerazione un n >= 2
log 3 3^t >= log 3 n/2^(n/2) ==> t log in base 3 di 3 >= n/2 log 3 n/2

t=omega(limite inferiore) di nlogn

Merge sort dare in input array estremo sinistro e destro dove sinistro =0 e
destro=n-1 fino a quando sin e des non sono uguali divido il sotto array in 2 e
richiamo il mergersort prendendo estremo sinistro sin e e.destro centro richiamo
la funz con e.sinistro centro+1 e e.destro dest applico la fusione


mergesort complessità:        1 se n=1 perché devo verificare che 0 non è minore di 0
                      t(n)=
                              2t(n/2)+n
Sapendo che t(n)=nlogn si ha ==> ipotizziamo che:

                          t(k)=klogk
                              .
                              .
                            n=2k
                              .
                              .
                          t(2k)=2t(k+2k)
                              .
                              .
                          2klogk+2k
                              .
                              .
                          2k(logk+1)
                              .
                              .
                          logk+log2
                              .
                              .
                            log2n
