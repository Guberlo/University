Le classi sono la parte fondamentale della programmazione ad oggetti. Esse
rappresentano una collezione di oggetti che fanno parte appunto di una classe
"madre" e che rispettano dei comportamenti comuni. Gli oggetti, possono quindi
essere anche chiamati col nome di attributi. Un esempio potrebbe essere la
classe "Automobile" i quali attributi potrebbero essere: "Colore","Ruote" ecc..
Ovvero tutte le parti che compongono la classe principale.  Una delle parti più
importanti delle classi è la procedura chiamata "encapsulation", ovvero la
possibilità di usufruire di member functions senza sapere come effettivamente
esse funzionino, l'importante è sapere cosa fanno.  Infatti non è fondamentale
sapere come funzioni la cout, l'importante è sapere cosa faccia.

La prima cosa da fare è ovviamente dare un nome alla classe, per convenzione il
nome viene assegnato in Upper case ad esempio "--class CashRegister--",
successivamente si dichiarano i public members(TUTTI I PUBLIC SI INDICANO CON +,
I PRIVATE CON -) e le public functions. Qualsiasi parte del programma potrà
richiamare questi membri, appunto perché sono pubblici. Fondamentalmente ci sono
due tipi di member functions: Mutators e Accessors. Come si può ben capire, le
prime apportano un cambiamento agli attributi. Un esempio di Mutator potrebbe
essere la funzione --"voidsetprice()"--, che va appunto a modificare l'attributo
price di un certo oggetto. Un esempio di Accessor invece potrebbe essere la
funzione --"void getPrice()"-- che appunto va a "raccogliere" il valore
dell'attributo price. Solitamente una buona pratica è settare i data members a
private, ovvero far si che solamente la classe in cui essi sono presenti può
usarli. Quindi se per esempio avessimo una classe del tipo: class CashRegister{
public: get_count(); ecc.. private: int item_count; double total_price; }; Nel
main non potremmo usare la sintassi: int main(){ .... ... obj.item_count; }

In quanto, visto che l'oggetto è stato dichiarato a private non possiamo
accedervi direttamente. Per accedere quindi alla variabile item_count dovremmo
richiamare nel main la funzione get_count();

Una caratteristica molto importante delle classi è il costruttore: Esso è una
member function della classe che inizializza l'oggetto con certi attributi. Un
costruttore viene qundi dichiarato nella parte pubblica della classe in questo
modo:--"CashRegister()--". Questo è detto Default Constructor, ovvero un
costruttore che non prende parametri. L'implementazione del costruttore avviene
come una normale funzione, e quindi:
--"CashRegister::CashRegister(){
  istruzioni..
  ..
  ..
}"

Una classe può avere anche più di un solo costruttore: in questo caso il
compilatore sceglierà in base al parametro passato alla funzione quale
costruttore usare: Immaginiamo di avere due costruttori del tipo:
CashRegister(); // CashRegister(double initial_amount);

Se nel main andremmo a creare un oggetto nel modo seguente: CashRegister obj1;
Il compilatore sceglierà il costruttore di default(quello che non accetta
parametri). Mentre se nel main andremmo a fare una chiamata del tipo:
CashRegister(double initial_amount) obj2;
Il compilatore sceglierà il costruttore che accetta un parametro di tipo double.

BankAccount::BankAccount(){
  balance=0;
}

BankAccount::BankAccount(double initial_amount){
  balance=initial_amount;
}

Item::Item(){
  price=0;
}

CashRegister::CashRegister(){
  clear();
}

Quando all'interno di una classe vi sono degli oggetti come "data members" la
classe chiamerà il costruttore di default dell'oggeto che ha come data member.
Se quindi nella classe madre dell'oggetto non è stato specificato alcun
costruttore di default o se la classe contiene una variabile const è necessario
ricorrere alle liste di inizializzazione. Ovvero:

class A {
public:
  A(int x_){x=x_}
  int x;
}

class B{
public:
  B():a(3),y(2); <--------------------

private:
  A a;
  const int y;
};

----->Puntatori ad oggetti <------- E' molto utile allocare dinamicamente gli
oggetti.Per fare ciò basta ovviamente creare un puntatore ad oggetto di
tipo classe nel main nel modo seguente:

int main(){

  CashRegister* register_pointer=new CashRegister;

} Questo appunto assegnerà l'indirizzo del nuovo oggetto creato al puntatore
register_pointer. Ovviamente si può anche associare ad un puntatore ad oggetto
un parametro del tipo new BankAccount(1000). Come visto in precedenza dopo aver
allocato dinamicamente un oggetto o qualsiasi cosa nello heap bisognerà poi
deallocare l'oggetto.

Per chiamare una funzione tramite un puntatore non si può semplicemente usare la
notazione *ptr.add_item(); in quanto l'operatore . ha precedenza rispetto
all'operatore *, il che significa che verrebbe assegnato l'operatore . ad un
pointer, il che non è lecito.  Per richiamare una funzione quindi tramite
puntatore si può o usare la sintassi con parentesi >> (*ptr).add_item();
O meglio utilizzare l'operatore 'arrow' -> >> ptr->add_item();

Un operatore molto importante per i puntatori ad oggetto nelle classi è
l'operatore this. Esso ci permette di chiarire alcune nozioni che potrebbero
essere fraintese: consideriamo di avere una classe A con un costruttore A(double
price) Si ha:

A::A(double price){ this->item_count++; this->total_price+=price; } Questo
operatore quindi specifica la natura di item_count e total_price che, non sono
delle variabili ma dei data members.


Una classe derivata in modo private rende tutti i membri della classe madre
private su di essa, e quindi questa classe non potrà più essere ereditata!!
